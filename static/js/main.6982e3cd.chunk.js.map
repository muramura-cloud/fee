{"version":3,"sources":["components/Summary.tsx","components/Detail.tsx","components/Fee.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Summary","props","className","type","value","numOfPeople","totalPrice","Detail","classification","name","description","unitPrice","onChange","e","num","Number","target","change","Fee","state","classifications","idx","currentFC","this","newFC","Object","assign","newClassifications","slice","setState","detailJsx","map","fc","key","toString","n","reduce","p","c","Fragment","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oNAoBeA,EAjByB,SAAAC,GAEpC,OACI,6BACI,yBAAKC,UAAU,SACX,2BAAOC,KAAK,OAAOD,UAAU,QAAQE,MAAOH,EAAMI,cAClD,+CAEJ,yBAAKH,UAAU,gBACX,8CACA,2BAAOC,KAAK,OAAOD,UAAU,eAAeE,MAAOH,EAAMK,aACzD,2CCeDC,EA1BuB,SAAAN,GAOlC,OACI,6BACI,yBAAKC,UAAU,uBAAuBD,EAAMO,eAAeC,MAC3D,yBAAKP,UAAU,eAAeD,EAAMO,eAAeE,aACnD,yBAAKR,UAAU,cAAcD,EAAMO,eAAeG,UAAlD,UACA,yBAAKT,UAAU,cACX,4BAAQE,MAAOH,EAAMO,eAAeH,YAAaO,SAAU,SAACC,GAAD,OAXxD,SAACA,GACZ,IAAMC,EAAcC,OAAOF,EAAEG,OAAOZ,OACpCH,EAAMgB,OAAOH,GAS6DG,CAAOJ,KACrE,4BAAQT,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,MAEJ,2CC+CDc,G,wDA/DX,WAAYjB,GAAY,IAAD,6BACnB,cAAMA,IA6BDkB,MAAQ,CACTC,gBAAiB,CA7BG,CACpBX,KAAM,eACNC,YAAa,GACbC,UAAW,IACXN,YAAa,EACbC,WAAY,GAEU,CACtBG,KAAM,eACNC,YAAa,6CACbC,UAAW,IACXN,YAAa,EACbC,WAAY,GAEU,CACtBG,KAAM,qBACNC,YAAa,qBACbC,UAAW,IACXN,YAAa,EACbC,WAAY,GAES,CACrBG,KAAM,eACNC,YAAa,qBACbC,UAAW,EACXN,YAAa,EACbC,WAAY,KA5BG,E,mDAmChBe,EAAaP,GAChB,IAAMQ,EAAYC,KAAKJ,MAAMC,gBAAgBC,GACvCf,EAAagB,EAAUX,UAAYG,EACnCU,EAAiBC,OAAOC,OAAO,GAAIJ,EAAW,CAAEjB,YAAaS,EAAKR,WAAYA,IAC9EqB,EAAqBJ,KAAKJ,MAAMC,gBAAgBQ,QACtDD,EAAmBN,GAAOG,EAC1BD,KAAKM,SAAS,CACVT,gBAAiBO,M,+BAIf,IAAD,OACCG,EAAYP,KAAKJ,MAAMC,gBAAgBW,KAAI,SAACC,EAAIX,GAClD,OACI,kBAAC,EAAD,CAAQb,eAAgBwB,EAAIC,IAAKZ,EAAIa,WAAYjB,OAAQ,SAACkB,GAAD,OAAO,EAAKlB,OAAOI,EAAKc,SAGnF9B,EAAckB,KAAKJ,MAAMC,gBAAgBW,KAAI,SAAAC,GAAE,OAAIA,EAAG3B,eAAa+B,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KACxFhC,EAAaiB,KAAKJ,MAAMC,gBAAgBW,KAAI,SAAAC,GAAE,OAAIA,EAAG1B,cAAY8B,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAC5F,OACI,kBAAC,IAAMC,SAAP,KACKT,EACD,kBAAC,EAAD,CAASzB,YAAaA,EAAaC,WAAYA,S,GA1D7CkC,IAAMC,YCITC,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6982e3cd.chunk.js","sourcesContent":["import React from 'react';\nimport { SummaryProps } from '../types/types';\n\nconst Summary: React.FC<SummaryProps> = props => {\n\n    return (\n        <div>\n            <div className=\"party\">\n                <input type=\"text\" className=\"party\" value={props.numOfPeople} />\n                <span>名様</span>\n            </div>\n            <div className=\"total-amount\">\n                <span>合計</span>\n                <input type=\"text\" className=\"total-amount\" value={props.totalPrice} />\n                <span>円</span>\n            </div>\n        </div>\n    );\n}\n\nexport default Summary;","import React from 'react';\nimport { DetailProps } from '../types/types';\n\nconst Detail: React.FC<DetailProps> = props => {\n\n    const change = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        const num: number = Number(e.target.value);\n        props.change(num);\n    }\n\n    return (\n        <div>\n            <div className=\"classification-name\">{props.classification.name}</div>\n            <div className=\"description\">{props.classification.description}</div>\n            <div className=\"unit-price\">{props.classification.unitPrice}円</div>\n            <div className=\"num-people\">\n                <select value={props.classification.numOfPeople} onChange={(e) => change(e)}>\n                    <option value=\"0\">0</option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                </select>\n                <span>名</span>\n            </div>\n        </div>\n    );\n}\n\nexport default Detail;","import React from 'react';\nimport Summary from './Summary';\nimport Detail from './Detail';\nimport { FeeData, FeeState } from '../types/types';\nimport '../static/Fee.css';\n\nclass Fee extends React.Component<{}, FeeState> {\n    constructor(props: {}) {\n        super(props);\n        const adults: FeeData = {\n            name: \"大人\",\n            description: \"\",\n            unitPrice: 1000,\n            numOfPeople: 0,\n            totalPrice: 0,\n        };\n        const students: FeeData = {\n            name: \"学生\",\n            description: \"中学生・高校生\",\n            unitPrice: 700,\n            numOfPeople: 0,\n            totalPrice: 0,\n        };\n        const children: FeeData = {\n            name: \"子ども\",\n            description: \"小校生\",\n            unitPrice: 300,\n            numOfPeople: 0,\n            totalPrice: 0,\n        };\n        const infants: FeeData = {\n            name: \"幼児\",\n            description: \"未就学\",\n            unitPrice: 0,\n            numOfPeople: 0,\n            totalPrice: 0,\n        };\n        this.state = {\n            classifications: [adults, students, children, infants]\n        };\n    }\n\n    change(idx: number, num: number) {\n        const currentFC = this.state.classifications[idx];\n        const totalPrice = currentFC.unitPrice * num;\n        const newFC: FeeData = Object.assign({}, currentFC, { numOfPeople: num, totalPrice: totalPrice });\n        const newClassifications = this.state.classifications.slice();\n        newClassifications[idx] = newFC;\n        this.setState({\n            classifications: newClassifications\n        });\n    }\n\n    render() {\n        const detailJsx = this.state.classifications.map((fc, idx) => {\n            return (\n                <Detail classification={fc} key={idx.toString()} change={(n) => this.change(idx, n)} />\n            );\n        });\n        const numOfPeople = this.state.classifications.map(fc => fc.numOfPeople).reduce((p, c) => p + c);\n        const totalPrice = this.state.classifications.map(fc => fc.totalPrice).reduce((p, c) => p + c);\n        return (\n            <React.Fragment>\n                {detailJsx}\n                <Summary numOfPeople={numOfPeople} totalPrice={totalPrice} />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Fee;","import React from 'react';\nimport logo from './logo.svg';\nimport Fee from './components/Fee';\n\nfunction App() {\n  return (\n    <Fee/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}